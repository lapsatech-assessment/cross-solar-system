package com.crossover.techtrial.service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.LongSummaryStatistics;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.crossover.techtrial.dto.DailyElectricity;
import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.repository.HourlyElectricityRepository;

/**
 * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
 *
 * @author Crossover
 *
 */

@Service
public class HourlyElectricityServiceImpl implements HourlyElectricityService {
  @Autowired
  HourlyElectricityRepository hourlyElectricityRepository;

  public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
    return hourlyElectricityRepository.save(hourlyElectricity);
  }

  public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
    return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
  }

  @Override
  public List<DailyElectricity> getPanelDailyStatistics(Long panelId) {
    final LocalDateTime startOfTheDay = LocalDate.now().atStartOfDay();
    return StreamSupport
	.stream(hourlyElectricityRepository.findAllByPanelId(panelId)
	    .spliterator(), true)
	.filter(x -> x.getReadingAt().isBefore(startOfTheDay))
	.collect(Collectors.groupingBy(x -> x.getReadingAt().toLocalDate()))
	.entrySet()
	.stream()
	.map(e -> {
	  final LongSummaryStatistics stat = e.getValue().stream()
	      .mapToLong(HourlyElectricity::getGeneratedElectricity)
	      .summaryStatistics();
	  return new DailyElectricity(e.getKey(), stat);
	})
	.collect(Collectors.toList());
  }

}